#!/bin/bash
#Base Image as L4T for jetpack 5.0.2
ARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r35.1.0
#ARG BASE_IMAGE=nvcr.io/nvidia/l4t-ml:r35.1.0-py3
FROM ${BASE_IMAGE}

ENV DEBIAN_FRONTEND=noninteractive

#install ubuntu-base packages

RUN apt-get update &&apt-get install -y  apt-utils && apt-get install -y lsb-release && apt-get -y clean 
RUN apt-get install -y wget && apt-get -y clean 
RUN apt-get install -y vim && apt-get -y clean 
RUN apt-get install -y curl && apt-get -y clean

#install cuda packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-cuda-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-cudnn8-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-tensorrt-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean


RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-opencv-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN ldconfig


ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
RUN echo "$PATH" && echo "$LD_LIBRARY_PATH"

RUN apt-get update

RUN apt-get -y install autoconf bc build-essential g++-8 gcc-8 clang-8 lld-8 gettext-base gfortran-8 iputils-ping libbz2-dev libc++-dev libcgal-dev libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblzma-dev libncurses5-dev libncursesw5-dev libpng-dev libreadline-dev libssl-dev libsqlite3-dev libxml2-dev libxslt-dev locales moreutils openssl python-openssl rsync scons python3-pip libopenblas-dev

RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y git && apt-get -y clean


#RUN git clone https://github.com/dusty-nv/jetson-inference jetson_inference
#ARG JETSON_INFERENCE_VERSION=v35.1.0
#RUN cd jetson_inference && \
#    git checkout ${JETSON_INFERENCE_VERSION}

#WORKDIR /jetson_inference

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
            cmake \
                  nano \
                  lsb-release \
                  gstreamer1.0-tools \
                  gstreamer1.0-libav \
                  gstreamer1.0-rtsp \
                  gstreamer1.0-plugins-rtp \
                  gstreamer1.0-plugins-good \
                  gstreamer1.0-plugins-bad \
                  gstreamer1.0-plugins-ugly \
    && rm -rf /var/lib/apt/lists/*


# pip dependencies for pytorch-ssd
RUN pip3 --no-cache-dir install --verbose --upgrade Cython && \
    pip3 --no-cache-dir install --verbose boto3 pandas tensorboard
#WORKDIR /jetson_inference    
#COPY c c
#COPY calibration calibration
#COPY examples examples
#COPY plugins plugins
#COPY python python
#COPY tools tools
#COPY utils utils

#COPY CMakeLists.txt CMakeLists.txt
#COPY CMakePreBuild.sh CMakePreBuild.sh



RUN apt-get update
RUN apt-get install git cmake libpython3-dev python3-numpy && apt-get -y clean
RUN git clone --recursive https://github.com/dusty-nv/jetson-inference
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/lib/aarch64-linux-gnu/tegra
COPY tegra /lib/aarch64-linux-gnu/tegra/
RUN cd jetson-inference && \
    mkdir build && \
    cd build && \
    export LD_LIBRARY_PATH=/lib/aarch64-linux-gnu/tegra && \
    cmake ../ && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd .. && \
    rm -rf build && \
    cd ../
    #rm -rf jetson-inference

#install ROS packges
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
RUN apt-get update
RUN apt-get -y install ros-noetic-ros-base && apt-get -y clean
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
RUN apt-get install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential && apt-get -y clean
RUN apt-get install -y python3-rosdep && apt-get -y clean
RUN sudo rosdep init
RUN sudo rosdep update




#install ML packages
RUN apt-get -y install autoconf bc build-essential g++-8 gcc-8 clang-8 lld-8 gettext-base gfortran-8 iputils-ping libbz2-dev libc++-dev libcgal-dev libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblzma-dev libncurses5-dev libncursesw5-dev libpng-dev libreadline-dev libssl-dev libsqlite3-dev libxml2-dev libxslt-dev locales moreutils openssl python-openssl rsync scons python3-pip libopenblas-dev && apt-get -y clean
#RUN apt-get install -y python3-pip
#RUN pip3 install torch
#RUN pip3 install torchvision==0.12.0
ARG PYTORCH_URL=https://nvidia.box.com/shared/static/ssf2v7pf5i245fk4i0q926hy4imzs2ph.whl
ARG PYTORCH_WHL=torch-1.11.0-cp38-cp38-linux_aarch64.whl

RUN wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${PYTORCH_URL} -O ${PYTORCH_WHL} && \
    pip3 install --no-cache-dir --verbose ${PYTORCH_WHL} && \
    rm ${PYTORCH_WHL}

#RUN wget -O torch-1.11.0-cp38-cp38-linux_aarch64.whl  
#RUN pip3 install torch-1.11.0-cp38-cp38-linux_aarch64.whl 



ARG TORCHVISION_VERSION=v0.12.0

RUN git clone https://github.com/pytorch/vision torchvision
RUN apt-get install -y nvidia-container-runtime
RUN cd torchvision && \
    git checkout ${TORCHVISION_VERSION} && \
    export CUDA_HOME="/usr/local/cuda" && \
    export FORCE_CUDA=1 && \
    export TORCH_CUDA_ARCH_LIST="5.2 6.0 6.1 7.0+PTX" && \
    python3 setup.py install && \
    cd ../ && \
    rm -rf torchvision
ENV CUDA_HOME="/usr/local/cuda"
RUN git clone https://github.com/RizwanMunawar/yolov7-segmentation yolov7

RUN apt-get install -y libusb-1.0-0-dev && apt-get -y clean
RUN apt-get install -y libudev-dev && apt-get -y clean
ARG LIBREAL_VERSION=v2.50.0
RUN git clone https://github.com/IntelRealSense/librealsense librealsense
RUN cd librealsense && \
    git checkout ${LIBREAL_VERSION} && \
    mkdir build && \
    cd build && \
    cmake ../ -DBUILD_EXAMPLES=OFF -DBUILD_WITH_CUDA=true -DBUILD_GRAPHICAL_EXAMPLES=OFF -DBUILD_WITH_OPENMP=OFF -DBUILD_UNIT_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -DENABLE_ZERO_COPY=ON -DFORCE_LIBUVC=OFF -DCMAKE_INSTALL_PREFIX=/opt/ros/noetic/ && \
    make -j5 && \
    make install && \
    cd .. && \
    rm -rf build && \
    cd ../
    #rm -rf librealsense

RUN pip3 --no-cache-dir install screeninfo

RUN apt-get install -y ros-noetic-interactive-markers && apt-get -y clean
ARG ROS_LIBREAL_VERSION=2.3.2

RUN mkdir haystack_ws


RUN apt-get install -y python3-requests && apt-get -y clean
RUN apt-get install -y ros-noetic-move-base-msgs && apt-get -y clean
RUN apt-get install -y ros-noetic-vision-msgs && apt-get -y clean
RUN apt-get install -y libbullet-dev && apt-get -y clean
RUN apt-get install -y libsdl-dev && apt-get -y clean
RUN apt-get install -y libsdl-image1.2-dev libyaml-cpp-dev && apt-get -y clean
RUN apt-get install -y ros-noetic-image-transport && apt-get -y clean
RUN apt-get install -y ros-noetic-tf && apt-get -y clean
RUN apt-get install -y ros-noetic-ddynamic-reconfigure && apt-get -y clean
RUN apt-get install -y ros-noetic-diagnostic-updater && apt-get -y clean
RUN apt-get install -y ros-noetic-angles && apt-get -y clean
RUN apt-get install -y ros-noetic-serial && apt-get -y clean
RUN apt-get install -y ros-noetic-hardware-interface && apt-get -y clean
RUN apt-get install -y ros-noetic-controller-manager && apt-get -y clean
RUN apt-get install -y ros-noetic-depth-image-proc && apt-get -y clean
#RUN apt-get install -y ros-noetic-pcl-ros
RUN apt-get install -y ros-noetic-laser-geometry && apt-get -y clean
RUN apt-get install -y ros-noetic-map-msgs && apt-get -y clean
RUN apt-get install -y ros-noetic-tf2-sensor-msgs && apt-get -y clean
RUN apt-get install -y ros-noetic-roslint && apt-get -y clean
RUN apt-get install -y ros-noetic-people-msgs && apt-get -y clean
RUN apt-get install -y ros-noetic-ecl-build && apt-get -y clean
RUN apt-get install -y ros-noetic-ecl-config && apt-get -y clean
RUN apt-get install -y ros-noetic-ecl-exceptions && apt-get -y clean
RUN apt-get install -y ros-noetic-ecl-formatters && apt-get -y clean
RUN apt-get install -y ros-noetic-ecl-linear-algebra && apt-get -y clean
RUN apt-get install -y ros-noetic-ecl-threads && apt-get -y clean
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" | sudo tee /etc/apt/sources.list.d/ros-focal.list
RUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
RUN curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | sudo apt-key add -

RUN apt-get update
RUN apt-get install -y ros-noetic-pcl-ros && apt-get -y clean

#RUN ["/bin/bash", "-c", "source /opt/ros/noetic/setup.bash && cd /haystack_ws && rosdep install --from-paths src --ignore-src -r -y;exit 0"]
#RUN ["/bin/bash", "-c", "source /opt/ros/noetic/setup.bash && cd /haystack_ws && catkin_make"]

#ENV PYTHONPATH=$PYTHONPATH:/yolov7
RUN apt-get install -y dbus bluez bluetooth && apt-get -y clean
#RUN cp /haystack_ws/src/haystack/scripts/10-local.rules /etc/udev/rules.d/ && udevadm control --reload-rules && udevadm trigger
COPY ./entryPoint.sh /entryPoint.sh
RUN apt-get install -y ros-noetic-diagnostic-aggregator && apt-get -y clean
RUN apt-get install -y ros-noetic-laser-filters && apt-get -y clean
RUN apt-get install -y ros-noetic-xacro && apt-get -y clean
RUN apt-get install -y ros-noetic-robot-state-publisher && apt-get -y clean
RUN apt-get install -y ros-noetic-rosserial-python && apt-get -y clean
ENV DISPLAY=:1
COPY SSD-Mobilenet-v2 /root/.ros/networks/SSD-Mobilenet-v2
COPY detectnet.prototxt /root/.ros/networks
COPY ilsvrc12_synset_words.txt /root/.ros/networks
COPY ssd_coco_labels.txt /root/.ros/networks
RUN apt-get install -y ros-noetic-ros-control ros-noetic-ros-controllers && apt-get -y clean
RUN apt-get install -y vim && apt-get -y clean
RUN apt-get install -y ros-noetic-gmapping && apt-get -y clean

RUN cd /
RUN pip3 --no-cache-dir install smbus
RUN apt-get install ros-noetic-oled-display-node && apt-get -y clean

ENV PYTHONPATH=$PYTHONPATH:/yolov7
RUN cd librealsense && \
    ./scripts/setup_udev_rules.sh

ENV PYTHONPATH=$PYTHONPATH:/haystack_ws/src/haystack/src

RUN pip3 --no-cache-dir install pandas
RUN pip3 --no-cache-dir install protobuf
RUN pip3 --no-cache-dir install tqdm
RUN pip3 --no-cache-dir install matplotlib
RUN pip3 --no-cache-dir install seaborn
RUN pip3 --no-cache-dir install numba

RUN adduser --disabled-password --gecos '' haystack
RUN sed -i '/<description/d; /its\:/d' /etc/fonts/fonts.conf /etc/fonts/conf.d/*conf

RUN pip3 install face_recognition 
RUN pip3 --no-cache-dir install dlib
RUN apt-get install -y aptitude && apt-get -y clean
RUN aptitude install python3-pyqt5 && apt-get -y clean
RUN pip3 --no-cache-dir install regex
RUN pip3 --no-cache-dir install simpleaudio
RUN pip3 --no-cache-dir install qroundprogressBar 
#WORKDIR /haystack_ws/src/haystack/ui/
WORKDIR /haystack_ws/

RUN sed -i '26a %haystack ALL=(ALL) NOPASSWD: /haystack_ws/src/haystack/ui/power_off.sh' /etc/sudoers

ENTRYPOINT ["/bin/bash", "/entryPoint.sh"]

